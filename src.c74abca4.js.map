{"version":3,"sources":["src/controls.js","src/player.js","src/map.js","src/camera.js","src/minimap.js","src/index.js"],"names":["state","codes","left","right","forward","backward","onKey","pressed","direction","document","addEventListener","which","circle","Math","PI","Player","x","y","speed","rotateSpeed","init","info","createElement","classList","add","body","appendChild","angle","distance","map","dx","cos","dy","sin","isWall","controls","tick","rotate","move","updateInfo","innerHTML","toFixed","Map","walls","width","length","height","eyeshot","charSet","wall","floor","char","get","player","depth","hitWall","boundary","nTestX","nTestY","p","tx","ty","vy","vx","d","hypot","dot","push","bound","sorted","sort","a","b","acos","Camera","fov","screen","Array","ceiling","wall1","wall2","wall3","wall4","floor1","floor2","floor3","floor4","canvas","append","cast","cell","paint","draw","chunk","chunks","array","size","slice","join","Minimap","camera","sight","el","compass","getPlayerPos","playerX","playerY","buffer","row","rowIndex","split","col","colIndex","Game","lastTime","minimap","fps","requestAnimationFrame","animate","time","delta","update","render"],"mappings":"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","file":"src.c74abca4.js","sourceRoot":"..","sourcesContent":["const codes = { 37: 'left', 39: 'right', 38: 'forward', 40: 'backward' }\nconst state = { left: false, right: false, forward: false, backward: false }\n\nfunction onKey (pressed, direction) {\n  if (!direction) {\n    return\n  }\n\n  state[direction] = pressed\n}\n\ndocument.addEventListener('keydown', ({ which }) => onKey(true, codes[which]))\ndocument.addEventListener('keyup', ({ which }) => onKey(false, codes[which]))\n\nexport default state\n","const circle = Math.PI * 2\n\nexport default class Player {\n  constructor (x, y, direction) {\n    this.x = x\n    this.y = y\n    this.speed = 10\n    this.rotateSpeed = Math.PI * 2\n    this.direction = direction\n\n    this.init()\n  }\n\n  init () {\n    this.info = document.createElement('div')\n    this.info.classList.add('player-info')\n\n    document.body.appendChild(this.info)\n  }\n\n  rotate (angle) {\n    this.direction = (this.direction + angle + circle) % circle\n  }\n\n  move (distance, map) {\n    const dx = Math.cos(this.direction) * distance\n    const dy = Math.sin(this.direction) * distance\n\n    if (!map.isWall(this.x + dx, this.y)) this.x += dx\n    if (!map.isWall(this.x, this.y + dy)) this.y += dy\n  }\n\n  update (controls, map, tick) {\n    if (controls.left) this.rotate(-this.rotateSpeed * tick)\n    if (controls.right) this.rotate(this.rotateSpeed * tick)\n    if (controls.forward) this.move((this.speed * tick), map)\n    if (controls.backward) this.move(-(this.speed * tick), map)\n\n    this.updateInfo(controls)\n  }\n\n  updateInfo ({ left, right, forward, backward }) {\n    this.info.innerHTML = `\n      x: ${this.x.toFixed(2)};\n      y: ${this.y.toFixed(2)};\n      r: ${this.direction.toFixed(2)}rad;\n      L: ${left};\n      R: ${right};\n      F: ${forward};\n      B: ${backward}\n    `\n  }\n}\n","export default class Map {\n  constructor () {\n    this.walls = [\n      '###############',\n      '#.............#',\n      '#.............#',\n      '#.............#',\n      '#..........####',\n      '#.............#',\n      '#.............#',\n      '#.............#',\n      '#.............#',\n      '#.......###...#',\n      '#.............#',\n      '#.............#',\n      '#.............#',\n      '###############'\n    ]\n\n    this.width = this.walls[0].length\n    this.height = this.walls.length\n    this.eyeshot = []\n    this.charSet = {\n      wall: '#',\n      floor: '.'\n    }\n  }\n\n  get (x, y) {\n    x = Math.floor(x)\n    y = Math.floor(y)\n\n    if (x < 0 || x > this.width - 1 || y < 0 || y > this.height - 1) {\n      return -1\n    }\n\n    return this.walls[y][x]\n  }\n\n  isWall (x, y) {\n    const char = this.get(x, y)\n    return char === this.charSet.wall\n  }\n\n  cast (player, angle, depth) {\n    const sin = Math.sin(angle)\n    const cos = Math.cos(angle)\n\n    let distance = 0\n    let hitWall = false\n    let boundary = false\n\n    while (!hitWall && distance < depth) {\n      distance += 1\n      const nTestX = Math.floor(player.x + cos * distance)\n      const nTestY = Math.floor(player.y + sin * distance)\n\n      this.eyeshot[nTestY] = this.eyeshot[nTestY] || []\n      this.eyeshot[nTestY][nTestX] = true\n\n      if (nTestX < 0 || nTestX >= this.width || nTestY < 0 || nTestY >= this.height) {\n        distance = depth\n        hitWall = true\n      } else {\n        if (this.walls[nTestY][nTestX] === this.charSet.wall) {\n          hitWall = true\n\n          const p = []\n\n          for (let tx = 0; tx < 2; tx++) {\n            for (let ty = 0; ty < 2; ty++) {\n              const vy = nTestX + tx - player.x\n              const vx = nTestY + ty - player.y\n              const d = Math.hypot(vx, vy)\n              const dot = (sin * vx / d) + (cos * vy / d)\n              p.push([d, dot])\n            }\n          }\n\n          const bound = 0.01\n          const sorted = p.sort((a, b) => a[0] < b[0])\n\n          if (Math.acos(sorted[0][1]) < bound) boundary = true\n          if (Math.acos(sorted[1][1]) < bound) boundary = true\n          if (Math.acos(sorted[2][1]) < bound) boundary = true\n        }\n      }\n    }\n\n    // remove fisheye effect\n    distance *= Math.cos(angle - player.direction)\n\n    return { distance, boundary }\n  }\n}","export default class Camera {\n  constructor (map, player) {\n    this.map = map\n    this.player = player\n    this.width = 250\n    this.height = 80\n    this.depth = 14\n    this.fov = 45 * (Math.PI  / 180)\n    this.screen = new Array(this.width * this.height)\n    this.charSet = {\n      ceiling: ' ',\n      boundary: ' ',\n      wall1: '█',\n      wall2: '▓',\n      wall3: '▒',\n      wall4: '░',\n      floor1: '#',\n      floor2: 'x',\n      floor3: '.',\n      floor4: '-'\n    }\n\n    this.init()\n  }\n\n  init () {\n    this.canvas = document.createElement('div')\n    this.canvas.classList.add('camera')\n\n    document.body.append(this.canvas)\n  }\n\n  // Big thanks to [Javidx9](https://github.com/OneLoneCoder) for this simple solution\n  render () {\n    // reset sight\n    this.map.eyeshot = []\n\n    for (let x = 0; x < this.width; x++) {\n      const angle = (this.player.direction - this.fov / 2) + (x / this.width) * this.fov\n      const { distance, boundary } = this.map.cast(this.player, angle, this.depth)\n\n      // calc ceiling and floor height\n      const ceiling = (this.height / 2) - this.height / distance\n      const floor = this.height - ceiling\n\n      for (let y = 0; y < this.height; y++) {\n        const cell = y * this.width + x\n        let paint = ' '\n\n        if (y <= ceiling) {\n          // ceiling\n          paint = this.charSet.ceiling\n        } else if (y > ceiling && y <= floor) {\n          // wall\n          if (distance <= this.depth / 4)     paint = this.charSet.wall1 // very close\n          else if (distance < this.depth / 3) paint = this.charSet.wall2\n          else if (distance < this.depth / 2) paint = this.charSet.wall3\n          else if (distance < this.depth)     paint = this.charSet.wall4 // far\n          else paint = ' '\n\n          if (boundary) paint = this.charSet.boundary\n        } else {\n          // floot\n          const b = 1 - (y - this.height / 2) / (this.height / 2)\n\n\t\t\t\t\tif (b < 0.25) paint = this.charSet.floor1\n\t\t\t\t\telse if (b < 0.5)\t paint = this.charSet.floor2\n\t\t\t\t\telse if (b < 0.75) paint = this.charSet.floor3\n          else if (b < 0.9)\t paint = this.charSet.floor4\n          else paint = ' '\n        }\n\n        this.screen[cell] = paint\n      }\n    }\n\n    this.draw()\n  }\n\n  draw () {\n    const chunk = (array = [], size) => array.length ? [array.slice(0, size), ...chunk(array.slice(size), size)] : []\n    const chunks = chunk(this.screen, this.width)\n\n    // draw buffer\n    this.canvas.innerHTML = chunks.map(chunk => chunk.join('')).join('<br/>')\n  }\n}","export default class Minimap {\n  constructor (map, player, camera) {\n    this.map = map\n    this.player = player\n    this.charSet = {\n      player: 'P',\n      wall: '#',\n      floor: '.',\n      sight: ' '\n    }\n\n    this.init()\n  }\n\n  init () {\n    this.el = document.createElement('pre')\n    this.el.classList.add('minimap')\n\n    this.compass = document.createElement('div')\n    this.compass.classList.add('compass')\n\n    document.body.appendChild(this.el)\n    document.body.appendChild(this.compass)\n  }\n\n  getPlayerPos () {\n    return {\n      x: Math.floor(this.player.x),\n      y: Math.floor(this.player.y)\n    }\n  }\n\n  update () {\n    const { x: playerX, y: playerY } = this.getPlayerPos()\n    const buffer = this.map.walls.map((row, rowIndex) => {\n      return row.split('').map((col, colIndex) => {\n        // player\n        if (colIndex === playerX && rowIndex === playerY) {\n          return this.charSet.player\n        }\n\n        // wall\n        if (col === this.map.charSet.wall) {\n          return this.charSet.wall\n        }\n\n        // eyesight\n        if (this.map.eyeshot[rowIndex] && this.map.eyeshot[rowIndex][colIndex]) {\n          return this.charSet.sight\n        }\n        \n        // floor\n        return this.charSet.floor\n      }).join('')\n    }).join('\\n')\n\n    this.el.innerHTML = buffer\n  }\n}\n","import controls from './controls'\nimport Player from './player'\nimport Map from './map'\nimport Camera from './camera'\nimport Minimap from './minimap'\n\nfunction Game () {\n  const map = new Map()\n  const player = new Player(2, 1, Math.PI * 0.5)\n  const camera = new Camera(map, player)\n  const minimap = new Minimap(map, player, camera)\n  const fps = 30\n  \n  function loop () {\n    let lastTime = null\n\n    requestAnimationFrame(function animate (time) {\n      requestAnimationFrame(animate)\n      const delta = time - lastTime\n      const tick = (time - lastTime) / 1000\n      lastTime = time\n  \n      if (delta > lastTime % (1000 / fps)) {\n        player.update(controls, map, tick)\n        camera.render(player, map)\n        minimap.update()\n      }\n    })\n  }\n  \n  loop()\n}\n\ndocument.addEventListener('DOMContentLoaded', () => new Game())\n"]}